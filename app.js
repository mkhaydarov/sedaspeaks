// ==========================
// –£—Ç–∏–ª–∏—Ç—ã
// ==========================
function escapeHtml(text){
  const map = {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'};
  return text.replace(/[&<>"']/g,m=>map[m]);
}

// ==========================
// –î–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
// ==========================
const lessonsData = [
  {id:'l1', title:'–£—Ä–æ–∫ 1 ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è', desc:'–§—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞', content:`<p><strong>Hi</strong> ‚Äî –ü—Ä–∏–≤–µ—Ç<br><strong>Hello</strong> ‚Äî –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ<br><strong>How are you?</strong> ‚Äî –ö–∞–∫ –¥–µ–ª–∞?</p>`, textToSpeak:'Hello! Hi! How are you?'},
  {id:'l2', title:'–£—Ä–æ–∫ 2 ‚Äî –°–µ–º—å—è', desc:'–°–ª–æ–≤–∞ –ø—Ä–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏', content:`<ul><li>mother ‚Äî –º–∞–º–∞</li><li>father ‚Äî –ø–∞–ø–∞</li><li>sister ‚Äî —Å–µ—Å—Ç—Ä–∞</li></ul>`, textToSpeak:'mother, father, sister'},
  {id:'l3', title:'–£—Ä–æ–∫ 3 ‚Äî –¶–≤–µ—Ç–∞', desc:'–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞', content:`<ul><li>red ‚Äî –∫—Ä–∞—Å–Ω—ã–π</li><li>blue ‚Äî —Å–∏–Ω–∏–π</li><li>green ‚Äî –∑–µ–ª—ë–Ω—ã–π</li></ul>`, textToSpeak:'red, blue, green'}
];

const vocabInitial = [
  {en:'hello',ru:'–ø—Ä–∏–≤–µ—Ç',favorite:false},{en:'thank you',ru:'—Å–ø–∞—Å–∏–±–æ',favorite:false},{en:'please',ru:'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞',favorite:false},
  {en:'yes',ru:'–¥–∞',favorite:false},{en:'no',ru:'–Ω–µ—Ç',favorite:false},{en:'good',ru:'—Ö–æ—Ä–æ—à–æ',favorite:false},{en:'bad',ru:'–ø–ª–æ—Ö–æ',favorite:false},
  {en:'cat',ru:'–∫–æ—Ç',favorite:false},{en:'dog',ru:'—Å–æ–±–∞–∫–∞',favorite:false},{en:'mother',ru:'–º–∞–º–∞',favorite:false},{en:'father',ru:'–ø–∞–ø–∞',favorite:false},
  {en:'sister',ru:'—Å–µ—Å—Ç—Ä–∞',favorite:false},{en:'brother',ru:'–±—Ä–∞—Ç',favorite:false},{en:'red',ru:'–∫—Ä–∞—Å–Ω—ã–π',favorite:false},{en:'blue',ru:'—Å–∏–Ω–∏–π',favorite:false},
  {en:'green',ru:'–∑–µ–ª—ë–Ω—ã–π',favorite:false},{en:'yellow',ru:'–∂—ë–ª—Ç—ã–π',favorite:false},{en:'black',ru:'—á—ë—Ä–Ω—ã–π',favorite:false},{en:'white',ru:'–±–µ–ª—ã–π',favorite:false},{en:'house',ru:'–¥–æ–º',favorite:false}
];

const miniQuizData=[
  {q:'–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å "–ø—Ä–∏–≤–µ—Ç" –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏?',opts:['bye','hello','thanks'],a:1},
  {q:'–ü–µ—Ä–µ–≤–æ–¥: "—Å–ø–∞—Å–∏–±–æ"',opts:['please','thank you','sorry'],a:1}
];

const state={lessons:lessonsData,vocab:[],completedLessons:new Set(),profile:{name:'Seda',goal:''},lang:'ru',dark:false};

// ==========================
// –°–µ–ª–µ–∫—Ç–æ—Ä—ã
// ==========================
const views=document.querySelectorAll('.view');
const navBtns=document.querySelectorAll('.nav-btn');
const containerLessons=document.getElementById('lessons-list');
const lessonDetail=document.getElementById('lesson-detail');
const lessonTitle=document.getElementById('lesson-title');
const lessonDesc=document.getElementById('lesson-desc');
const lessonContent=document.getElementById('lesson-content');
const playLessonBtn=document.getElementById('play-lesson');
const markDoneBtn=document.getElementById('mark-done');
const backToLessons=document.getElementById('back-to-lessons');
const progressBar=document.getElementById('progress-bar');

const vocabList=document.getElementById('vocab-list');
const vocabSearch=document.getElementById('vocab-search');
const addWordBtn=document.getElementById('add-word');
const addWordBox=document.getElementById('add-word-box');
const newWordEn=document.getElementById('new-word-en');
const newWordRu=document.getElementById('new-word-ru');
const saveWordBtn=document.getElementById('save-word');
const cancelWordBtn=document.getElementById('cancel-word');

const profileName=document.getElementById('profile-name');
const profileGoal=document.getElementById('profile-goal');
const saveProfile=document.getElementById('save-profile');
const clearDataBtn=document.getElementById('clear-data');

const practicePlay=document.getElementById('practice-play');
const practiceStartRec=document.getElementById('practice-start-rec');
const recResult=document.getElementById('rec-result');
const startMiniQuiz=document.getElementById('start-mini-quiz');
const miniQuizBox=document.getElementById('mini-quiz-box');
const miniQuizArea=document.getElementById('mini-quiz-area');
const submitMiniQuiz=document.getElementById('submit-mini-quiz');
const closeMiniQuiz=document.getElementById('close-mini-quiz');
const themeToggle=document.getElementById('theme-toggle');
const langToggle=document.getElementById('lang-toggle');

// ==========================
// Load / Save
// ==========================
function loadFromStorage(){
  const raw=localStorage.getItem('efh_state');
  if(raw){
    const parsed=JSON.parse(raw);
    state.vocab=parsed.vocab||vocabInitial.slice();
    state.completedLessons=new Set(parsed.completed||[]);
    state.profile=parsed.profile||state.profile;
    state.lang=parsed.lang||'ru';
    state.dark=parsed.dark||false;
  } else state.vocab=vocabInitial.slice();
  document.body.classList.toggle('dark',state.dark);
  langToggle.textContent=state.lang==='ru'?'EN':'RU';
}
function saveToStorage(){
  const payload={vocab:state.vocab,completed:Array.from(state.completedLessons),profile:state.profile,lang:state.lang,dark:state.dark};
  localStorage.setItem('efh_state',JSON.stringify(payload));
  renderProgress();
}

loadFromStorage();

// ==========================
// Navigation
// ==========================
function showView(name){views.forEach(v=>v.classList.toggle('active',v.id===`view-${name}`));}
navBtns.forEach(btn=>btn.addEventListener('click',()=>showView(btn.dataset.view)));
document.querySelectorAll('[data-view]').forEach(b=>b.addEventListener('click',()=>showView(b.dataset.view)));

// ==========================
// Lessons
// ==========================
function renderLessons(){
  containerLessons.innerHTML='';
  state.lessons.forEach(lesson=>{
    const el=document.createElement('div');
    el.className='card lesson-card';
    el.innerHTML=`<h3 class="title">${lesson.title}</h3><p class="muted small">${lesson.desc}</p>
    <div style="margin-top:10px;display:flex;gap:8px">
      <button class="outline btn-open" data-id="${lesson.id}">–û—Ç–∫—Ä—ã—Ç—å</button>
      <button class="primary btn-play" data-id="${lesson.id}">üîä</button>
      <button class="outline btn-mark" data-id="${lesson.id}">${state.completedLessons.has(lesson.id)?'‚úî –ü—Ä–æ–π–¥–µ–Ω':'–û—Ç–º–µ—Ç–∏—Ç—å'}</button>
    </div>`;
    containerLessons.appendChild(el);
  });

  containerLessons.querySelectorAll('.btn-open').forEach(b=>b.addEventListener('click',()=>openLesson(b.dataset.id)));
  containerLessons.querySelectorAll('.btn-play').forEach(b=>b.addEventListener('click',()=>{const l=state.lessons.find(x=>x.id===b.dataset.id); speakText(l.textToSpeak);}));
  containerLessons.querySelectorAll('.btn-mark').forEach(b=>b.addEventListener('click',()=>{state.completedLessons.add(b.dataset.id);saveToStorage();renderLessons();}));
}

function openLesson(id){
  const lesson=state.lessons.find(l=>l.id===id);
  if(!lesson) return;
  lessonTitle.textContent=lesson.title;
  lessonDesc.textContent=lesson.desc;
  lessonContent.innerHTML=lesson.content;
  lessonDetail.classList.remove('hidden');
  playLessonBtn.onclick=()=>speakText(lesson.textToSpeak);
  markDoneBtn.onclick=()=>{
    state.completedLessons.add(lesson.id);saveToStorage();renderLessons();renderProgress();alert('–£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π ‚úÖ');
  };
}
backToLessons.addEventListener('click',()=>lessonDetail.classList.add('hidden'));
function renderProgress(){const total=state.lessons.length;const done=state.completedLessons.size;const pct=Math.round((done/total)*100);progressBar.style.width=pct+'%';progressBar.textContent=pct+'%';progressBar.setAttribute('aria-valuenow',pct);}
renderLessons();renderProgress();

// ==========================
// TTS
// ==========================
function speakText(text){if(!window.speechSynthesis){alert('TTS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');return;}const utter=new SpeechSynthesisUtterance(text);utter.lang='en-US';utter.rate=0.95;window.speechSynthesis.cancel();window.speechSynthesis.speak(utter);}
function speakWord(word){speakText(word);}

// ==========================
// Vocabulary
// ==========================
function renderVocab(filter=''){
  vocabList.innerHTML='';
  const items=state.vocab.filter(v=>v.en.toLowerCase().includes(filter.toLowerCase())||v.ru.toLowerCase().includes(filter.toLowerCase()));
  items.forEach((v,idx)=>{
    const li=document.createElement('li');
    li.innerHTML=`<div><strong>${escapeHtml(v.en)}</strong> ‚Äî <span class="muted small">${escapeHtml(v.ru)}</span></div>
    <div style="display:flex;gap:8px;align-items:center">
      <button class="outline btn-play-word" data-index="${idx}">üîä</button>
      <button class="outline btn-fav" data-index="${idx}">${v.favorite?'‚òÖ':'‚òÜ'}</button>
      <button class="outline btn-del" data-index="${idx}">üóë</button>
    </div>`;
    vocabList.appendChild(li);
  });
  vocabList.querySelectorAll('.btn-play-word').forEach(b=>b.addEventListener('click',()=>speakWord(state.vocab[b.dataset.index].en)));
  vocabList.querySelectorAll('.btn-fav').forEach(b=>b.addEventListener('click',()=>{state.vocab[b.dataset.index].favorite=!state.vocab[b.dataset.index].favorite;saveToStorage();renderVocab(vocabSearch.value);}));
  vocabList.querySelectorAll('.btn-del').forEach(b=>b.addEventListener('click',()=>{if(confirm('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ?')){state.vocab.splice(b.dataset.index,1);saveToStorage();renderVocab(vocabSearch.value);}}));
}
vocabSearch.addEventListener('input',()=>renderVocab(vocabSearch.value));
addWordBtn.addEventListener('click',()=>addWordBox.classList.remove('hidden'));
cancelWordBtn.addEventListener('click',()=>addWordBox.classList.add('hidden'));
saveWordBtn.addEventListener('click',()=>{
  const en=newWordEn.value.trim(); const ru=newWordRu.value.trim();
  if(!en||!ru){alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è');return;}
  state.vocab.push({en,ru,favorite:false});newWordEn.value='';newWordRu.value='';addWordBox.classList.add('hidden');saveToStorage();renderVocab(vocabSearch.value);
});
renderVocab();

// ==========================
// Profile
// ==========================
profileName.value=state.profile.name;
profileGoal.value=state.profile.goal;
saveProfile.addEventListener('click',()=>{
  state.profile.name=profileName.value||'Seda';
  state.profile.goal=profileGoal.value;
  saveToStorage();
  alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ');
});
clearDataBtn.addEventListener('click',()=>{
  if(confirm('–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å?')){state.completedLessons.clear();state.vocab=vocabInitial.slice();saveToStorage();renderVocab();renderLessons();renderProgress();}
});

// ==========================
// Mini-quiz
// ==========================
startMiniQuiz.addEventListener('click',()=>{
  miniQuizArea.innerHTML='';
  miniQuizBox.classList.remove('hidden');
  miniQuizData.forEach((q,i)=>{
    const div=document.createElement('div');
    div.innerHTML=`<p>${i+1}. ${q.q}</p>${q.opts.map((o,idx)=>`<label><input type="radio" name="q${i}" value="${idx}"> ${o}</label>`).join('<br>')}`;
    miniQuizArea.appendChild(div);
  });
});
submitMiniQuiz.addEventListener('click',()=>{
  let score=0;
  miniQuizData.forEach((q,i)=>{const sel=document.querySelector(`input[name="q${i}"]:checked`);if(sel&&parseInt(sel.value)===q.a) score++;});
  alert(`–í—ã –Ω–∞–±—Ä–∞–ª–∏ ${score} –∏–∑ ${miniQuizData.length}`);
  miniQuizBox.classList.add('hidden');
});
closeMiniQuiz.addEventListener('click',()=>miniQuizBox.classList.add('hidden'));

// ==========================
// Theme toggle
// ==========================
themeToggle.addEventListener('click',()=>{
  state.dark=!state.dark;document.body.classList.toggle('dark',state.dark);saveToStorage();
});

// ==========================
// Language toggle (interface only)
// ==========================
const langMap={
  en:{'–ì–ª–∞–≤–Ω–∞—è':'Home','–£—Ä–æ–∫–∏':'Lessons','–°–ª–æ–≤–∞—Ä—å':'Vocabulary','–ü—Ä–∞–∫—Ç–∏–∫–∞':'Practice','–ü—Ä–æ—Ñ–∏–ª—å':'Profile','–¢–µ–º–∞':'Theme','–û—Ç–º–µ—Ç–∏—Ç—å':'Mark as done','–ü—Ä–æ–π–¥–µ–Ω':'Completed','–ù–∞—á–∞—Ç—å —É—Ä–æ–∫':'Start Lesson','–û—Ç–∫—Ä—ã—Ç—å —Å–ª–æ–≤–∞—Ä—å':'Open Vocabulary','–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Seda!':'Welcome, Seda!','–≠—Ç–æ—Ç —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è: –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏, —É–¥–æ–±–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.':'This site is made just for you: short lessons, convenient vocabulary, and exercises to practice English.'},
  ru:{}
};
langToggle.addEventListener('click',()=>{
  state.lang=state.lang==='ru'?'en':'ru';
  langToggle.textContent=state.lang==='ru'?'EN':'RU';
  translateInterface();
  saveToStorage();
});
function translateInterface(){
  if(state.lang==='en'){
    document.querySelectorAll('[data-view]').forEach(b=>{
      if(langMap.en[b.textContent]) b.textContent=langMap.en[b.textContent];
    });
    document.querySelector('#home-title').textContent=langMap.en['–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Seda!'];
    document.querySelector('#view-home p').textContent=langMap.en['–≠—Ç–æ—Ç —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è: –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏, —É–¥–æ–±–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.'];
  } else {
    document.querySelectorAll('[data-view]').forEach(b=>{
      const map={home:'–ì–ª–∞–≤–Ω–∞—è',lessons:'–£—Ä–æ–∫–∏',vocab:'–°–ª–æ–≤–∞—Ä—å',practice:'–ü—Ä–∞–∫—Ç–∏–∫–∞',profile:'–ü—Ä–æ—Ñ–∏–ª—å'};
      b.textContent=map[b.dataset.view]||b.textContent;
    });
    document.querySelector('#home-title').textContent='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Seda!';
    document.querySelector('#view-home p').textContent='–≠—Ç–æ—Ç —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è: –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏, —É–¥–æ–±–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.';
  }
}
translateInterface();